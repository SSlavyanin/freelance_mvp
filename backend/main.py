from fastapi import FastAPI, Request
import asyncio
from backend.scheduler import poll_parser
from shared.config import TELEGRAM_USERNAME, TELEGRAM_BOT_TOKEN
from backend.agent_client import get_reply_from_agent
import httpx

app = FastAPI()

AGENT_URL = "https://code-agent-qi30.onrender.com/handle_order"  # –∞–¥—Ä–µ—Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ code_agent

@app.get("/")
def root():
    return {"status": "OK"}


@app.on_event("startup")
async def start_background_tasks():
    asyncio.create_task(poll_parser())


@app.post("/receive_order")
async def receive_order(order: dict):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ Telegram.
    """
    title = order.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    desc = order.get("desc", "")
    link = order.get("link", "#")
    contact = order.get("contact", None)

    # üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞ —á–µ—Ä–µ–∑ AI-–∞–≥–µ–Ω—Ç–∞
    reply = await get_reply_from_agent(title, desc)

    # üîπ –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Telegram
    reply = await get_reply_from_agent(title, order.get("desc", ""))

    # üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    await notify_user(title, link, contact, reply)
    return {"status": "ok"}


async def notify_user(title, link, contact, reply_text):
    try:
        contact_text = f"\nüë§ –ö–æ–Ω—Ç–∞–∫—Ç: {contact}" if contact else ""
        async with httpx.AsyncClient() as client:
            await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                json={
                    "chat_id": "<user_chat_id>",  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π ID
                    "text": f"üìå –ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {title}\nüîó {link}{contact_text}\n\nüß† –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç:\n{reply_text}"
                }
            )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", e)


async def get_reply_from_agent(title: str, desc: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≥–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞.
    """
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(AGENT_URL, json={"title": title, "desc": desc})
            response.raise_for_status()
            return response.json().get("reply", "ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        print("Agent error:", e)
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞."
