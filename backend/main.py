# backend/main.py

from fastapi import FastAPI, Request
import asyncio
from backend.scheduler import poll_parser
from shared.config import TELEGRAM_USERNAME
import httpx

app = FastAPI()

@app.on_event("startup")
async def start_background_tasks():
    asyncio.create_task(poll_parser())

@app.post("/receive_order")
async def receive_order(order: dict):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ Telegram.
    """
    title = order.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    link = order.get("link", "#")

    reply = f"üß† –ê–≤—Ç–æ–æ—Ç–∫–ª–∏–∫:\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ: {title}\n" \
            f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram: {TELEGRAM_USERNAME}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
    await notify_user(title, link, reply)
    return {"status": "ok"}

async def notify_user(title, link, reply_text):
    try:
        async with httpx.AsyncClient() as client:
            await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                json={
                    "chat_id": "<user_chat_id>",  # –ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ
                    "text": f"üìå –ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {title}\nüîó {link}\n\n{reply_text}"
                }
            )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", e)
