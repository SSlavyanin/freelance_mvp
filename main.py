import os
import logging
from fastapi import FastAPI, Request
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.ext import CallbackQueryHandler
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

app = FastAPI()
bot = Bot(token=BOT_TOKEN)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Telegram Bot logic
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞", callback_data="logo")],
        [InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="text")],
        [InlineKeyboardButton("üíª –ù–∞–ø–∏—Å–∞—Ç—å —Å–∫—Ä–∏–ø—Ç", callback_data="script")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action = query.data
    await query.edit_message_text(f"üîÑ –í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É: {action}...")

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã –∞–≥–µ–Ω—Ç–æ–≤)
    result = f"‚úÖ {action.capitalize()} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    await bot.send_message(chat_id=query.message.chat_id, text=result)

# FastAPI route (—Ç–µ—Å—Ç)
@app.get("/")
async def root():
    return {"status": "ok"}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
def start_bot():
    app_telegram = ApplicationBuilder().token(BOT_TOKEN).build()
    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(CallbackQueryHandler(handle_action))
    app_telegram.run_polling()

import threading
threading.Thread(target=start_bot).start()
